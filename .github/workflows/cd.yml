name: Docker Image CI

on:
  push:
    branches: [ "main", "staging" ]

permissions:
  contents: write

env:
  ECR_REPOSITORY: nginx
  EKS_CLUSTER_NAME: main-${{ vars.STAGE }}
  AWS_REGION: us-east-1
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.ref_name }}
    steps:
    - name: Check out Code
      uses: actions/checkout@v3
    - name: Set short git commit SHA
      id: commit
      uses: prompt/actions-commit-hash@v3
    ### Configure AWS Access
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{env.AWS_REGION}}
    - name: Update kube config
      run: echo aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
    ### Deploy ArgoCD Application, only run if application file was updated
    # - uses: dorny/paths-filter@v2
    #   id: changes
    #   with:
    #     filters: |
    #       application:
    #         - 'argocd/**'
    # - name: Deploy ArgoCD application
    #   if: steps.changes.outputs.application == 'true'
    #   run: echo kubectl apply -f argocd/application.yaml -f charts/values-${{ vars.STAGE }}.yaml
    ### Semantic Release
    - run: npm install
    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v4
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    - name: Do something when a new release published
      if: steps.semantic.outputs.new_release_published == 'true'
      run: |
        echo ${{ steps.semantic.outputs.new_release_version }}
        echo ${{ steps.semantic.outputs.new_release_major_version }}
        echo ${{ steps.semantic.outputs.new_release_minor_version }}
        echo ${{ steps.semantic.outputs.new_release_patch_version }}
    ### Build and Push Docker Image
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      if: steps.semantic.outputs.new_release_published == 'true'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.semantic.outputs.new_release_version }}
      run: |
          echo docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} -f docker/Dockerfile .
          echo docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker pull nginx:latest
          docker tag nginx:latest ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
    ### Update k8s manifiest
    - name: Setup yq
      uses: vegardit/gha-setup-yq@v1
    - name: Checkout deployment repository
      uses: actions/checkout@v3
      if: steps.semantic.outputs.new_release_published == 'true'
      with: 
        repository: dlopezb93/sample-argocd-app-deployments
        path: ./source-deployments
        ref: main
        token: ${{ secrets.GIT_BOT_TOKEN }}
    - run: cat ./source-deployments/charts/nginx/values-${{ vars.STAGE}}.yaml
    - name: Staging - Update K8S Manifiest
      env:
        IMAGE_TAG: ${{ steps.semantic.outputs.new_release_version }}
      if: (steps.semantic.outputs.new_release_published == 'true' && ${{ vars.STAGE }} == 'prd')
      run: |
        cd ./source-deployments
        yq '.image.tag = "${{ env.IMAGE_TAG }}"' -i ./charts/nginx/values-${{ vars.STAGE }}.yaml
        git add .
        git config user.name github-actions
        git config user.email github-actions@github.com
        git commit -am "chore: update image tag in values-${{ vars.STAGE }}.yaml [skip ci]"
        git push
    - name: Create PR in deployments repository
      env:
        IMAGE_TAG: ${{ steps.semantic.outputs.new_release_version }}
      if: |
        ${{ steps.semantic.outputs.new_release_published == 'true' }} && ${{ vars.STAGE == 'stg' }}
      run: |
        REPOSITORY="dlopezb93/sample-argocd-app-deployments"
        FOLDER="bin/$REPOSITORY"

        # Clone the remote repository and change working directory to the
        # folder it was cloned to.
        git clone \
          --depth=1 \
          --branch=main \
          https://dlopezb93:${{ secrets.GIT_BOT_TOKEN }}@github.com/$REPOSITORY \
          $FOLDER

        cd $FOLDER
        git config user.name github-actions
        git config user.email github-actions@github.com
        git checkout -b chore/update-image-tag
        yq '.image.tag = "${{ env.IMAGE_TAG }}"' -i ./charts/nginx/values-${{ vars.STAGE }}.yaml
        cat ./charts/nginx/values-${{ vars.STAGE }}.yaml
        git add .
        git commit -am "chore: update image tag in values-${{ vars.STAGE }}.yaml [skip ci]"
        git push origin chore/update-image-tag
        gh pr create \
            --body "" \
            --title "chore: update image tag" \
            --head "chore/update-image-tag" \
            --base "main"
  